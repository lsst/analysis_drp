description: Make coadd plots for QA
tasks:
  # Make a plot showing the difference between the aperture 12 magnitude and the PSF magnitude.
  # This plot shows the on sky distribution of these values for stars.
  plot_CircAp12_sub_PSF_meas_sky_stars:
    class: lsst.analysis.drp.skyPlot.SkyPlotTask
    config:
      connections.plotName: CircAp12_sub_PSF_meas_stars_i

  plot_CircAp12_sub_PSF_meas_sky_gals:
    # Make a plot showing the difference between the aperture 12 magnitude and the PSF magnitude.
    # This plot shows the on sky distribution of these values for galaxies.
    class: lsst.analysis.drp.skyPlot.SkyPlotTask
    config:
      connections.plotName: CircAp12_sub_PSF_meas_gals_i
      sourceSelectorActions.sourceSelector: GalaxyIdentifier
      python: |
        from lsst.analysis.drp.dataSelectors import GalaxyIdentifier

  plot_CircAp12_sub_PSF_meas_calib_psf_used_sky_stars:
    # Make a plot showing the difference between the aperture 12 magnitude and the PSF magnitude.
    # This plot shows the on sky distribution of these values for stars that were selected as
    # having the flag calib_psf_used = True.
    class: lsst.analysis.drp.skyPlot.SkyPlotTask
    config:
      connections.plotName: CircAp12_sub_PSF_meas_calib_psf_used_stars_i
      selectorActions.calibPointSelector: FlagSelector
      selectorActions.calibPointSelector.selectWhenTrue: ["i_calib_psf_used"]
      fixAroundZero: True
      python: |
        from lsst.analysis.drp.dataSelectors import FlagSelector

  plot_CircAp12_sub_PSF_meas_calib_psf_used_sky_gals:
    # Make a plot showing the difference between the aperture 12 magnitude and the PSF magnitude.
    # This plot shows the on sky distribution of these values for galaxies that were selected as
    # having the flag calib_psf_used = True.
    class: lsst.analysis.drp.skyPlot.SkyPlotTask
    config:
      connections.plotName: CircAp12_sub_PSF_meas_calib_psf_used_gals_i
      selectorActions.calibPointSelector: FlagSelector
      selectorActions.calibPointSelector.selectWhenTrue: ["i_calib_psf_used"]
      sourceSelectorActions.sourceSelector: GalaxyIdentifier
      python: |
        from lsst.analysis.drp.dataSelectors import FlagSelector, GalaxyIdentifier

  plot_CircAp12_sub_PSF_meas_calib_psf_used_sky_unknown:
    # Make a plot showing the difference between the aperture 12 magnitude and the PSF magnitude.
    # This plot shows the on sky distribution of these values for objects of unknown classification
    # that were selected as having the flag calib_psf_used = True.
    class: lsst.analysis.drp.skyPlot.SkyPlotTask
    config:
      connections.plotName: CircAp12_sub_PS_meas_calib_psf_used_unknowns_i
      selectorActions.calibPointSelector: FlagSelector
      selectorActions.calibPointSelector.selectWhenTrue: ["i_calib_psf_used"]
      sourceSelectorActions.sourceSelector: UnknownIdentifier
      python: |
        from lsst.analysis.drp.dataSelectors import FlagSelector, UnknownIdentifier

  plot_PSFluxSN_meas_sky_all:
    # Make a plot showing the signal to noise ratio for the PSF flux.
    # This plot shows the on sky distribution of these values for all objects.
    class: lsst.analysis.drp.skyPlot.SkyPlotTask
    config:
      connections.plotName: PSFFluxSN_meas_all_i
      axisActions.zAction: DivideColumns
      axisActions.zAction.colA.column: "i_psfFlux"
      axisActions.zAction.colB.column: "i_psfFluxErr"
      sourceSelectorActions: None
      python: |
        from lsst.pipe.tasks.dataFrameActions import DivideColumns
        config.axisLabels.update({"z": "S/N = psfFlux/psfFluxErr"})

  plot_Kron_sub_PSFmag_meas_sky_galaxies:
    # Make a plot showing the difference between the kron magnitude and the PSF magnitude.
    # This plot shows the on sky distribution of these values for galaxies.
    class: lsst.analysis.drp.skyPlot.SkyPlotTask
    config:
      connections.plotName: Kron_sub_PSF_meas_galaxies_i
      axisActions.zAction.col1: "i_kronFlux"
      sourceSelectorActions.sourceSelector: GalaxyIdentifier
      python: |
        from lsst.analysis.drp.dataSelectors import GalaxyIdentifier
        config.axisLabels.update({"z": "Kron - PSF (mmag)"})

  plot_Kron_sub_PSFmag_meas_sky_stars:
    # Make a plot showing the difference between the kron magnitude and the PSF magnitude.
    # This plot shows the on sky distribution of these values for stars.
    class: lsst.analysis.drp.skyPlot.SkyPlotTask
    config:
      connections.plotName: Kron_sub_PSF_meas_stars_i
      axisActions.zAction.col1: "i_kronFlux"
      fixAroundZero: True
      python: |
        config.axisLabels.update({"z": "Kron - PSF (mmag)"})

  plot_CModel_sub_PSFmag_meas_sky_galaxies:
    # Make a plot showing the difference between the cmodel magnitude and the PSF magnitude.
    # This plot shows the on sky distribution of these values for galaxies.
    class: lsst.analysis.drp.skyPlot.SkyPlotTask
    config:
      connections.plotName: CModel_sub_PSF_meas_galaxies_i
      axisActions.zAction.col1: "i_cModelFlux"
      sourceSelectorActions.sourceSelector: GalaxyIdentifier
      python: |
        from lsst.analysis.drp.dataSelectors import GalaxyIdentifier
        config.axisLabels.update({"z": "CModel - PSF (mmag)"})

  plot_CModel_sub_PSFmag_meas_sky_stars:
    # Make a plot showing the difference between the cmodel magnitude and the PSF magnitude.
    # This plot shows the on sky distribution of these values for stars.
    class: lsst.analysis.drp.skyPlot.SkyPlotTask
    config:
      connections.plotName: CModel_sub_PSF_meas_stars_i
      axisActions.zAction.col1: "i_cModelFlux"
      fixAroundZero: True
      python: |
        config.axisLabels.update({"z": "CModel - PSF (mmag)"})

  plot_CircAp12_sub_PSF_meas_calib_psf_used_stars_scatter:
    # Make a scatter plot showing the difference between the circular aperture 12 magnitude and the PSF
    # magnitude for stars. These objects were all selected as having the flag calib_psf_used = True.
    class: lsst.analysis.drp.scatterPlot.ScatterPlotWithTwoHistsTask
    config:
      connections.plotName: CircAp12_sub_PSF_meas_calib_psf_used_stars_i
      selectorActions.calibPointSelector: FlagSelector
      selectorActions.calibPointSelector.selectWhenTrue: ["i_calib_psf_used"]
      python: |
        from lsst.analysis.drp.dataSelectors import FlagSelector

  plot_CircAp12_sub_PSF_meas_stars_scatter:
    # Make a scatter plot showing the difference between the circular aperture 12 magnitude and the PSF
    # magnitude for stars.
    class: lsst.analysis.drp.scatterPlot.ScatterPlotWithTwoHistsTask
    config:
      connections.plotName: CircAp12_sub_PSF_meas_stars_i

  plot_CircAp12_sub_PSF_meas_calib_psf_used_gals_scatter:
    # Make a scatter plot showing the difference between the circular aperture 12 magnitude and the PSF
    # magnitude for galaxies. These objects were all selected as having the flag
    # calib_psf_used = True.
    class: lsst.analysis.drp.scatterPlot.ScatterPlotWithTwoHistsTask
    config:
      connections.plotName: CircAp12_sub_PSF_meas_calib_psf_used_gals_i
      selectorActions.calibPointSelector: FlagSelector
      selectorActions.calibPointSelector.selectWhenTrue: ["i_calib_psf_used"]
      sourceSelectorActions.sourceSelector: GalaxyIdentifier
      python: |
        from lsst.analysis.drp.dataSelectors import FlagSelector, GalaxyIdentifier

  plot_CircAp12_sub_PSF_meas_gals_scatter:
    # Make a scatter plot showing the difference between the circular aperture 12 magnitude and the PSF
    # magnitude for galaxies.
    class: lsst.analysis.drp.scatterPlot.ScatterPlotWithTwoHistsTask
    config:
      connections.plotName: CircAp12_sub_PSF_meas_gals_i
      sourceSelectorActions.sourceSelector: GalaxyIdentifier
      python: |
        from lsst.analysis.drp.dataSelectors import GalaxyIdentifier

  plot_PsfFluxSN_meas_stars_scatter:
    # Make a plot showing the signal to noise ratio for the PSF flux.
    class: lsst.analysis.drp.scatterPlot.ScatterPlotWithTwoHistsTask
    config:
      connections.plotName: PsfFluxSN_meas_stars_i
      selectorActions.catSnSelector.threshold: 5
      highSnStatisticSelectorActions: None
      lowSnStatisticSelectorActions: None
      xLims: (17.5, 28.0)
      yLims: (-20.0, 6000)
      python: |
        from lsst.pipe.tasks.dataFrameActions import DivideColumns
        config.axisActions.yAction = DivideColumns
        config.axisActions.yAction.colA.column = "i_psfFlux"
        config.axisActions.yAction.colB.column = "i_psfFluxErr"
        config.axisLabels.update({"y": "S/N = {}/{}".format(config.axisActions.yAction.colA.column,
                                                            config.axisActions.yAction.colB.column)})

  plot_CModelFluxSN_meas_stars_scatter:
    # Make a plot showing the signal to noise ratio for the CModel flux.
    class: lsst.analysis.drp.scatterPlot.ScatterPlotWithTwoHistsTask
    config:
      connections.plotName: CModelFluxSN_meas_stars_i
      selectorActions.catSnSelector.threshold: 5
      highSnStatisticSelectorActions: None
      lowSnStatisticSelectorActions: None
      xLims: (17.0, 28.0)
      yLims: (-20.0, 6000)
      python: |
        from lsst.pipe.tasks.dataFrameActions import DivideColumns
        config.axisActions.yAction = DivideColumns
        config.axisActions.yAction.colA.column = "i_cModelFlux"
        config.axisActions.yAction.colB.column = "i_cModelFluxErr"
        config.axisLabels.update({"y": "S/N = {}/{}".format(config.axisActions.yAction.colA.column,
                                                            config.axisActions.yAction.colB.column)})

  plot_PsfSN_sub_CModelSN_meas_scatter_stars:
    # Make a scatter plot showing the signal to noise ratio difference for CModel vs. PSF
    # flux vs. CModel flux for stars only.
    class: lsst.analysis.drp.scatterPlot.ScatterPlotWithTwoHistsTask
    config:
      axisActions.yAction: SnDiffCalculator
      connections.plotName: PsfSN_sub_CModelSN_meas_stars_i
      selectorActions.catSnSelector.threshold: 5
      xLims: (17.0, 28.0)
      yLims: (-10.0, 60)
      highSnStatisticSelectorActions: None
      lowSnStatisticSelectorActions: None
      python: |
        from lsst.analysis.drp.calcFunctors import SnDiffCalculator
        config.axisLabels.update({"y": "S/N$_{PSF}$ - S/N$_{CModel}$"})

  plot_PsfSN_sub_CModelSN_meas_scatter_gals:
    # Make a scatter plot showing the signal to noise ratio difference for CModel vs. PSF
    # flux vs. CModel flux for stars only.
    class: lsst.analysis.drp.scatterPlot.ScatterPlotWithTwoHistsTask
    config:
      axisActions.yAction: SnDiffCalculator
      connections.plotName: PsfSN_sub_CModelSN_meas_gals_i
      selectorActions.catSnSelector.threshold: 5
      xLims: (17.0, 28.0)
      yLims: (-3000.0, 500)
      highSnStatisticSelectorActions: None
      lowSnStatisticSelectorActions: None
      sourceSelectorActions.sourceSelector: GalaxyIdentifier
      python: |
        from lsst.analysis.drp.dataSelectors import GalaxyIdentifier
        from lsst.analysis.drp.calcFunctors import SnDiffCalculator
        config.axisLabels.update({"y": "S/N$_{PSF}$ - S/N$_{CModel}$"})

  plot_PercentDiff_PsfSN_CModelSN_meas_scatter_stars:
    # Make a scatter plot showing the signal to noise ratio difference for CModel vs. PSF
    # flux vs. CModel flux for stars only.
    class: lsst.analysis.drp.scatterPlot.ScatterPlotWithTwoHistsTask
    config:
      axisActions.yAction: SnPercentDiffCalculator
      connections.plotName: PercentDiff_PsfSN_CModelSN_meas_stars_i
      selectorActions.catSnSelector.threshold: 5
      highSnStatisticSelectorActions: None
      lowSnStatisticSelectorActions: None
      python: |
        from lsst.analysis.drp.calcFunctors import SnPercentDiffCalculator
        config.axisLabels.update({"y": "Percent Diff: S/N$_{PSF}$ - S/N$_{CModel}$"})

  skyPlot_skyObject:
    # Make a plot showing the 9-pixel radius circular aperture flux in units of nJy.
    # This plot shows the on sky distribution of these values for sky objects.
    class: lsst.analysis.drp.skyPlot.SkyPlotTask
    config:
      connections.plotName: skyObject_i
      axisActions.zAction: SingleColumnAction
      axisActions.zAction.column: "i_ap09Flux"
      selectorActions.flagSelector: FlagSelector
      selectorActions.flagSelector.selectWhenTrue: ["sky_object"]
      selectorActions.flagSelector.selectWhenFalse: ["i_pixelFlags_edge"]
      selectorActions.remove: ["catSnSelector"]
      sourceSelectorActions: None
      statisticSelectorActions.statSelector.threshold: -1e12
      python: |
        from lsst.analysis.drp.dataSelectors import FlagSelector
        config.axisLabels.update({"z": "Sky Object i_ap09Flux (nJy)"})

  histPlot_skyObject:
    # Make a plot showing histograms of the PSFlux and 9-pixel radius circular aperture flux.
    # The left panel histograms show flux in units of nJy.
    # The right panel histograms show the equivalent sigma flux values (flux/fluxErr)
    class: lsst.analysis.drp.histPlot.HistPlotTask
    config:
      connections.plotName: skyObject_i
      selectorActions.flagSelector: FlagSelector
      selectorActions.flagSelector.selectWhenTrue: ["sky_object"]
      selectorActions.flagSelector.selectWhenFalse: ["i_pixelFlags_edge"]
      python: |
        from lsst.analysis.drp.dataSelectors import FlagSelector
        from lsst.analysis.drp import calcFunctors
        from lsst.pipe.tasks.dataFrameActions import SingleColumnAction
        config.panels["panel1"] = HistPlotConfig
        config.panels["panel1"].label = "Flux (nJy)"
        config.panels["panel1"].actions.update = {
          "hist1": SingleColumnAction(column="i_psfFlux"),
          "hist2": SingleColumnAction(column="i_ap09Flux"),
        }
        config.panels["panel1"].histLabels = {
          "hist1": "psfFlux",
          "hist2": "ap09Flux",
        }
        config.panels["panel2"] = HistPlotConfig
        config.panels["panel2"].label = "S/N"
        config.panels["panel2"].actions.update = {
          "hist1": calcFunctors.SNCalculator(
            colA=SingleColumnAction(column="i_psfFlux"),
            colB=SingleColumnAction(column="i_psfFluxErr"),),
          "hist2": calcFunctors.SNCalculator(
            colA=SingleColumnAction(column="i_ap09Flux"),
            colB=SingleColumnAction(column="i_ap09FluxErr"),),
        }
        config.panels["panel2"].histLabels = {
          "hist1": "psfFlux SN",
          "hist2": "ap09Flux SN",
        }

  plot_ri_gr_cmodel:
    # Make a color color plot of gri in CModel magnitudes.
    class: lsst.analysis.drp.colorColorPlot.ColorColorPlotTask
    config:
      connections.plotName: ri_gr_cmodel
      axisActions.xAction.magDiff.col1: "g_cModelFlux"
      axisActions.xAction.magDiff.col2: "r_cModelFlux"
      axisActions.xAction.magDiff.returnMillimags: False
      axisActions.yAction.magDiff.col1: "r_cModelFlux"
      axisActions.yAction.magDiff.col2: "i_cModelFlux"
      axisActions.yAction.magDiff.returnMillimags: False
      axisActions.zAction.column: "i_cModelFlux"
      axisLabels: {"x": "g - r CModel (mag)",
                   "y": "r - i CModel (mag)",
                   "z": "i_cModelMag (mag)"}
      selectorActions.coaddSelector: FlagSelector
      selectorActions.coaddSelector.selectWhenFalse: ["g_cModel_flag", "r_cModel_flag", "i_cModel_flag"]
      selectorActions.flagSelector.bands: ["g", "r", "i"]
      selectorActions.catSnSelector.fluxType: "cModelFlux"
      selectorActions.catSnSelector.threshold: 50
      selectorActions.catSnSelector.bands: ["g", "r", "i"]
      python: >
        from lsst.analysis.drp.dataSelectors import FlagSelector

  plot_ri_gr_psf:
    # Make a color color plot of gri in PSF magnitudes.
    class: lsst.analysis.drp.colorColorPlot.ColorColorPlotTask
    config:
      connections.plotName: ri_gr_psf
      axisActions.xAction.magDiff.col1: "g_psfFlux"
      axisActions.xAction.magDiff.col2: "r_psfFlux"
      axisActions.xAction.magDiff.returnMillimags: False
      axisActions.yAction.magDiff.col1: "r_psfFlux"
      axisActions.yAction.magDiff.col2: "i_psfFlux"
      axisActions.yAction.magDiff.returnMillimags: False
      axisActions.zAction.column: "i_psfFlux"
      axisLabels: {"x": "g - r PSF (mag)",
                   "y": "r - i PSF (mag)",
                   "z": "i_PsfMag (mag)"}
      selectorActions.flagSelector.bands: ["g", "r", "i"]
      selectorActions.catSnSelector.threshold: 50
      selectorActions.catSnSelector.bands: ["g", "r", "i"]

  plot_astromRefCat_sky_tract_dRA:
    class: lsst.analysis.drp.skyPlot.SkyPlotTask
    config:
      connections.catPlot: objectTable_tract_astrometryRefCat_match
      connections.plotName: astromRefCatResiduals_sky_ra_coadd_i
      axisActions.zAction: AstromDiff
      axisActions.zAction.col1: "coord_ra_target"
      axisActions.zAction.col2: "coord_ra_ref"
      axisActions.xAction.column: "coord_ra_ref"
      axisActions.yAction.column: "coord_dec_ref"
      selectorActions.remove: ["catSnSelector"]
      python: |
        from lsst.analysis.drp.calcFunctors import AstromDiff
        config.axisLabels.update({"z": "$RA_{target} - RA_{ref}$ (marcsec)"})

  plot_astromRefCat_sky_tract_dDec:
    class: lsst.analysis.drp.skyPlot.SkyPlotTask
    config:
      connections.catPlot: objectTable_tract_astrometryRefCat_match
      connections.plotName: astromRefCatResiduals_sky_dec_coadd_i
      axisActions.zAction: AstromDiff
      axisActions.zAction.col1: "coord_dec_target"
      axisActions.zAction.col2: "coord_dec_ref"
      axisActions.xAction.column: "coord_ra_ref"
      axisActions.yAction.column: "coord_dec_ref"
      selectorActions.remove: ["catSnSelector"]
      python: |
        from lsst.analysis.drp.calcFunctors import AstromDiff
        config.axisLabels.update({"z": "$Dec_{target} - Dec_{ref}$ (marcsec)"})

  plot_astromRefCat_scatter_tract_dRA:
    class: lsst.analysis.drp.scatterPlot.ScatterPlotWithTwoHistsTask
    config:
      connections.catPlot: objectTable_tract_astrometryRefCat_match
      connections.plotName: astromRefCatResiduals_scatter_ra_coadd_i
      axisActions.yAction: AstromDiff
      axisActions.yAction.col1: "coord_ra_target"
      axisActions.yAction.col2: "coord_ra_ref"
      selectorActions.remove: ["catSnSelector"]
      highSnStatisticSelectorActions.statSelector.fluxType: "psfFlux"
      lowSnStatisticSelectorActions.statSelector.fluxType: "psfFlux"
      python: |
        from lsst.analysis.drp.calcFunctors import AstromDiff
        config.axisLabels.update({"y": "$RA_{target} - RA_{ref}$ (marcsec)"})

  plot_astromRefCat_scatter_tract_dDec:
    class: lsst.analysis.drp.scatterPlot.ScatterPlotWithTwoHistsTask
    config:
      connections.catPlot: objectTable_tract_astrometryRefCat_match
      connections.plotName: astromRefCatResiduals_scatter_dec_coadd_i
      axisActions.yAction: AstromDiff
      axisActions.yAction.col1: "coord_dec_target"
      axisActions.yAction.col2: "coord_dec_ref"
      selectorActions.remove: ["catSnSelector"]
      highSnStatisticSelectorActions.statSelector.fluxType: "psfFlux"
      lowSnStatisticSelectorActions.statSelector.fluxType: "psfFlux"
      python: |
        from lsst.analysis.drp.calcFunctors import AstromDiff
        config.axisLabels.update({"y": "$Dec_{target} - Dec_{ref}$ (marcsec)"})
