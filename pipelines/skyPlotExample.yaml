# A pipeline giving example syntax for plotting functions
# Focussing on the sky plot
description: Demonstrate examples of the plotting syntax for sky plots
tasks:
  # The most basic option uses the default values for
  # everything except plotname and the column to be plotted
  # on the z axis,
  plot_GaussFlux_sky:
    class: lsst.analysis.drp.skyPlot.SkyPlotTask
    config:
      axisActions.zAction.column: iCModelFlux
      connections.plotName: CModelFlux_sky
      axisLabels: {"x": "R.A. (Degrees)", "y": "Dec. (Degrees)", "z": "CModel Flux"}

  # Change what is plotted on the z axis
  # in this case use a predefined action (defined in calcFunctors.py)
  plot_PsfSn_sky:
    class: lsst.analysis.drp.skyPlot.SkyPlotTask
    config:
      connections.plotName: PsfSn_sky
      axisActions.zAction: SNCalculator
      axisLabels: {"x": "R.A. (Degrees)", "y": "Dec. (Degrees)", "z": "PS Flux S/N"}
      python: >
        from lsst.analysis.drp.calcFunctors import SNCalculator

  # Change what is plotted on the z axis
  # Here use a predefined action that is imported from calcFunctors
  # Actions generate values to plot at runtime, in this case dividing
  # the Kron flux by the Psf flux.
  plot_KronDivPsf_sky:
    class: lsst.analysis.drp.skyPlot.SkyPlotTask
    config:
      axisActions.zAction: KronFluxDivPsfFlux
      connections.plotName: KronDivPsf_sky
      axisLabels: {"x": "R.A. (Degrees)", "y": "Dec. (Degrees)", "z": "Kron Flux / PS Flux"}
      python: >
        from lsst.analysis.drp.calcFunctors import KronFluxDivPsfFlux

  # Change the selector used to choose the points that go into
  # calculating the displayed statistics.
  # Also adjust the signal to noise threshold of the selector.
  plot_PsfSn_highSN_sky:
    class: lsst.analysis.drp.skyPlot.SkyPlotTask
    config:
      axisActions.zAction: SNCalculator
      statisticSelectorActions.statSelector: HighSnSelector
      connections.plotName: PsfSn_high_sky
      statisticSelectorActions.statSelector.threshold: 3000
      axisLabels: {"x": "R.A. (Degrees)", "y": "Dec. (Degrees)", "z": "PS Flux S/N"}
      python: |
        from lsst.analysis.drp.dataSelectors import HighSnSelector
        from lsst.analysis.drp.calcFunctors import SNCalculator

  # Add a new selector, the CModel flag selector.
  # Also use the high SN Selector to select for points to plot not
  # just to use for stats, to do this we use the update functionality
  # to preserve the other default selectors.
  plot_psfSn_goodCmodel_sky:
    class: lsst.analysis.drp.skyPlot.SkyPlotTask
    config:
      axisActions.zAction: SNCalculator
      selectorActions.update: {"PhotomFlagSelector": PsfFlagSelector, "SnSelector": HighSnSelector}
      connections.plotName: PsfSn_goodCModel_sky
      axisLabels: {"x": "R.A. (Degrees)", "y": "Dec. (Degrees)", "z": "PS Flux S/N"}
      python: |
        from lsst.analysis.drp.dataSelectors import PsfFlagSelector, HighSnSelector
        from lsst.analysis.drp.calcFunctors import SNCalculator

 # Same as above bu tths time plot it for galaxies not stars
 # The defualt is stars but you can also use all for both.
 # Then adjust the SN threshold for points to be included in the plot.
  plot_psfSn_goodCmodel_gals_sky:
    class: lsst.analysis.drp.skyPlot.SkyPlotTask
    config:
      axisActions.zAction: SNCalculator
      selectorActions.update: {"PhotomFlagSelector": PsfFlagSelector, "SnSelector": HighSnSelector}
      selectorActions.SnSelector.threshold: 500
      sourceSelectorActions.sourceSelector: GalaxyIdentifier
      connections.plotName: PsfSn_goodCModel_gals_sky
      axisLabels: {"x": "R.A. (Degrees)", "y": "Dec. (Degrees)", "z": "PS Flux S/N"}
      python: |
        from lsst.analysis.drp.dataSelectors import PsfFlagSelector, HighSnSelector, GalaxyIdentifier
        from lsst.analysis.drp.calcFunctors import SNCalculator
